Generate and print 48-bit keys for all sixteen rounds of DES algorithm, given a 64-bit initial key

#include<bits/stdc++.h>
using namespace std;

int perm1[] = { 
1,2,3,4,5,6,7,
8,9,10,11,12,13,14,
15,16,17,18,19,20,21,
22,23,24,25,26,27,28,
29,30,31,32,33,34,35,
36,37,38,39,40,41,42,
43,44,45,46,47,48,49,
50,51,52,53,54,55,56,
};
int perm2[] = { 
1,2,3,4,5,6,7,8,
9,10,11,12,13,14,15,16,
17,18,19,20,21,22,23,24,
25,26,27,28,29,30,31,32,
33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,
};
int leftshift[] = {1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};

string rotatesubkey(string s,int rot)
{
  return s.substr(rot,s.length()-rot)+s.substr(0,rot);
};
string permu1f(string input)
{ int i;
  string res="";
  for(i=0;i<56;i++)
  {
    res+=input[perm1[i]-1];
  }
  return res;
}
string permu2f(string input)
{ int i;
  string res="";
  for(i=0;i<48;i++){
  res += input[perm2[i]-1];
  }
  return res;
}
void genkey(string left, string right)
{int i;
  ofstream fout;
  fout.open("keygen.txt");
  for(i=0;i<16;i++)
  {
    left = rotatesubkey(left,leftshift[i]);
    right = rotatesubkey(right,leftshift[i]);
    string key = permu2f(left+right);
    cout <<"key"<<i+1<<"\t"<<key<<endl;
    fout<<key<<endl;

  }
}
int main()
{
  unsigned long long hexkey;
  cout<<"enter 64bit";
  cin>>hex>>hexkey;

  string key = bitset<64>(hexkey).to_string();
  cout<<"p1"<<key<<endl;

  key = permu1f(key);
  cout <<"p1"<<key<<endl;

  cout<<"\nsubkey"<<endl;
  genkey(key.substr(0,28),key.substr(28,28));

  cout<<endl<<endl;
}
